!     ************************************
!     * Server Proxy Procedure Code
!     *    generated by rpcmake
!     *    on Friday, April 13, 2012 at 15:38:27
!     *    
!     * interface: basic_server 
!     *    
!     ************************************


!     **********************************************
!     * PRC SERVER MAIN.
!     * USES ODE.ENV AS THE DEFAULT ENVIRONMENT FILE.
!     **********************************************
      

PROGRAM rpc_BASFUNC
     EXTERNAL INTEGER FUNCTION BASFUNC(INTEGER, REAL, REAL, STRING)
     EXTERNAL INTEGER FUNCTION RPCHANDL(STRING, INTEGER, INTEGER)
     EXTERNAL INTEGER FUNCTION dce_spawn_ref(INTEGER BY REF, &
                                             STRING BY DESC, &
                                             STRING BY DESC, &
                                             INTEGER BY REF, &
                                             STRING BY DESC)
     EXTERNAL SUB dce_init_server_vms_ref( STRING BY DESC, &
                                           STRING BY DESC, &
                                           INTEGER BY REF)
     EXTERNAL SUB dce_waitfor_call_vms_ref(INTEGER BY REF, &
                                           STRING BY DESC, &
                                           INTEGER BY REF)
     EXTERNAL SUB dce_setenv_vms_ref(STRING BY DESC, &
                                     INTEGER BY REF, &
                                     INTEGER BY REF, &
                                     INTEGER BY REF)
     EXTERNAL SUB dce_send_vms_ref(INTEGER BY REF, &
                                   STRING BY DESC, &
                                   INTEGER BY REF)
     EXTERNAL SUB dce_pop_char_str_vms_ref(INTEGER BY REF, &
                                           STRING BY DESC, &
                                           STRING BY DESC, &
                                           INTEGER BY REF)
     EXTERNAL SUB dce_pop_int_vms_ref(INTEGER BY REF, &
                                      STRING BY DESC, &
                                      INTEGER BY REF)
     EXTERNAL SUB dce_pop_float_vms_ref(INTEGER BY REF, &
                                        STRING BY DESC, &
                                        REAL BY REF)
     EXTERNAL SUB dce_push_int_vms_ref(INTEGER BY REF, &
                                       STRING BY DESC, &
                                       INTEGER BY REF)


!  ODECOMMENT BEGIN DECLARATIONS basic_server BASFUNC
      DECLARE INTEGER ODE_LOCAL,ODE_QUEUES
      DECLARE INTEGER RV
      DECLARE INTEGER SOCKET
      DECLARE INTEGER RSOCKET
      DECLARE INTEGER DCE_TABLE
      DECLARE INTEGER DCE_NULL
      DECLARE STRING FUNC$(60), DCEFUNC$(60), DCE_FUNC, &
                     ODE_FILE
      DECLARE STRING CMDLINE
      DECLARE STRING ODE_SERVER
      DECLARE INTEGER DCE_RESULT
!
!     DO-RPC-MAIN.
!
!      CALL dce_parse_arg_ref( CMDLINE, ODE_FILE,ODE_SERVER, RV)
         SOCKET =0
         DCE_NULL = 0
         RV = 0
         LET DCEFUNC$ = SPACE$(60)
         LET ODE_SERVER="basic_server"
         LET ODE_FILE = "server.env"
          CALL dce_setenv_vms_ref( ODE_FILE, DCE_NULL, DCE_NULL, RV)
           IF (RV = 0) THEN
                PRINT "SET ENV WITH "; ODE_FILE; " FAILED."
                STOP
           END IF
            CALL dce_init_server_vms_ref( ODE_FILE, ODE_SERVER, SOCKET)
           IF (SOCKET = 0) THEN
              PRINT "SETUP SERVER FAILED."
              STOP
           END IF
    
           RV = 0
           WHILE RV = 0
            CALL dce_waitfor_call_vms_ref( SOCKET, DCEFUNC$, DCE_TABLE)
            IF (DCE_TABLE = 0) then
              PRINT "DCE_WAITFOR_CALL FAILED."
              PRINT "WAITING ON DCE_FUNC = ";DCEFUNC$
              STOP
            END IF

            RV = dce_should_exit(RV)
            IF (RV = 1) THEN
                PRINT "Should exit SERVER Failure."
                STOP
            END IF
            RV = dce_err_is_fatal(RV)
            IF (RV = 1) THEN
                PRINT "Fatal Error SERVER RV=1."
                STOP
            END IF
            RV = 0
            RV = dce_server_is_ded_ref(RV)
            IF (RV = 1) THEN
             CALL dce_spawn_ref(SOCKET,CMDLINE,ODE_FILE,ODE_LOCAL,ODE_SERVER)
             RV = dce_retsocket_ref(SOCKET)
            END IF
            CALL  dce_retsocket_ref(RSOCKET)

           RV = RPCHANDL( DCEFUNC$, DCE_TABLE, RSOCKET)
           IF (RV = 0) THEN
             CALL dce_send_vms_ref( RSOCKET, DCEFUNC$, RV)
             CALL dce_recv_conf_ref( RSOCKET, RV)
             CALL dce_table_destroy_ref( DCE_TABLE)
             CALL dce_release_ref()
             CALL dce_server_is_ded_ref( RV)
             IF (RV = 0) THEN
                 CALL dce_close_socket_ref( RSOCKET, RV)
             END IF
           END IF
        NEXT


      END PROGRAM



      SUB RBASFUNC(DCE_TABLE, SOCKET)
      EXTERNAL INTEGER FUNCTION BASFUNC(INTEGER, REAL, REAL, STRING BY DESC)
      DECLARE STRING FUNC$, DCE_FUNC, ODE_FILE, CBUFFER$(50) 
      DECLARE STRING CMDLINE
      DECLARE STRING ODE_SERVER
      DECLARE INTEGER D_MAGS
      DECLARE INTEGER E_MAGS
      DECLARE INTEGER i
      DECLARE REAL f
      DECLARE REAL d
      DECLARE STRING strng  
      DECLARE INTEGER dce_result
           LET strng= SPACE$(100)
           LET CBUFFER$= "i" + STRING$(1%, 0%) 
           CALL dce_pop_int_vms_ref(DCE_TABLE, CBUFFER$, i)
           LET CBUFFER$= "f" + STRING$(1%, 0%) 
           CALL dce_pop_float_vms_ref(DCE_TABLE, CBUFFER$, f)
           LET CBUFFER$= "d" + STRING$(1%, 0%) 
           CALL dce_pop_float_vms_ref(DCE_TABLE, CBUFFER$, d)
           LET CBUFFER$= "strng" + STRING$(1%, 0%) 
           D_MAGS = 50
           CALL dce_pop_char_str_vms_ref   &
                 (DCE_TABLE, CBUFFER$,   &
                strng, D_MAGS)
           dce_result = BASFUNC &
               (    &
               i,    &
               f,    &
               d,    &
               strng    &
               )
           CBUFFER$ = 'dce_result' + STRING$(1%, 0%)
           CALL dce_push_int_vms_ref(SOCKET, CBUFFER$, dce_result)
      END  SUB





!*******************************************
!  DISPATCH TO SERVER FUNCTIONS YOU WRITE
!*******************************************

        FUNCTION INTEGER RPCHANDL(DCE_FUNC$, DCE_TABLE, SOCKET)
        DECLARE INTEGER COUNTER
!
!          
       LET FUNC$ = "BASFUNC"
       COUNTER= POS(DCE_FUNC$, FUNC$, 1) 
       IF (COUNTER = 1) THEN
          CALL RBASFUNC(DCE_TABLE, SOCKET)
       ELSE      
!            
!          
         PRINT "Function not recognized: "; DCE_FUNC$
!
       END IF
       COUNTER=0
       RPCHANDL = COUNTER
!       RETURN
       END FUNCTION

